using System.Threading.Tasks;
using Nethereum.Web3;
using Nethereum.ABI.FunctionEncoding.Attributes;
using Nethereum.Web3.Accounts;
using Nethereum.Contracts;
using System.Numerics;
using System;
using BlockchainConsoleApp.ProductHistoryDefinition;
using BlockchainConsoleApp.ProductHistory;

namespace BlockchainConsoleApp
{
    public class Program
    {
        private static string ContractAddress { get; set; } = "0xb01284ec4bc7f95a6f30b7e6fa781d31ae81d9f6"; //ProductHostory contract address in Ropsten.ethereum.io
        //The URL endpoint for the blockchain network.
        private static string url = "https://ropsten.infura.io/v3/<Project_id>"; //Create account and Project in Infura and get Project_Id
        static async Task Main()
        {
            //System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
            var senderAddress = new Account("Add your address");
            BigInteger gas = Web3.Convert.ToWei(3000000);
            BigInteger valueAmount = Web3.Convert.ToWei(4000000);
            BigInteger gasprice = Web3.Convert.ToWei(5000000000);
            //The ABI for the contract.

            string Bytecode = "608060405234801561001057600080fd5b50611263806100206000396000f300608060405260043610610083576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632e7700f01461008857806368111cce146100b3578063776059ec1461019c5780639e7ab8ec14610242578063ad4d978614610407578063c8f0532a146104ce578063d54630e31461054b575b600080fd5b34801561009457600080fd5b5061009d61065c565b6040518082815260200191505060405180910390f35b3480156100bf57600080fd5b5061011a600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610669565b6040518080602001838152602001828103825284818151815260200191508051906020019080838360005b83811015610160578082015181840152602081019050610145565b50505050905090810190601f16801561018d5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b3480156101a857600080fd5b506101c7600480360381019080803590602001909291905050506107ee565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102075780820151818401526020810190506101ec565b50505050905090810190601f1680156102345780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561024e57600080fd5b506102b3600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001909291905050506108a9565b6040518080602001806020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001838103835288818151815260200191508051906020019080838360005b83811015610361578082015181840152602081019050610346565b50505050905090810190601f16801561038e5780820380516001836020036101000a031916815260200191505b50838103825287818151815260200191508051906020019080838360005b838110156103c75780820151818401526020810190506103ac565b50505050905090810190601f1680156103f45780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b34801561041357600080fd5b506104b4600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610cb5565b604051808215151515815260200191505060405180910390f35b3480156104da57600080fd5b50610535600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610d83565b6040518082815260200191505060405180910390f35b34801561055757600080fd5b50610642600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610dfa565b604051808215151515815260200191505060405180910390f35b6000600180549050905090565b6060600080836040518082805190602001908083835b6020831015156106a4578051825260208201915060208101905060208303925061067f565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000016000846040518082805190602001908083835b60208310151561071257805182526020820191506020810190506020830392506106ed565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060020154818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107de5780601f106107b3576101008083540402835291602001916107de565b820191906000526020600020905b8154815290600101906020018083116107c157829003601f168201915b5050505050915091509150915091565b60606001828154811015156107ff57fe5b906000526020600020018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561089d5780601f106108725761010080835404028352916020019161089d565b820191906000526020600020905b81548152906001019060200180831161088057829003601f168201915b50505050509050919050565b606080600080600080876040518082805190602001908083835b6020831015156108e857805182526020820191506020810190506020830392506108c3565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000016000886040518082805190602001908083835b6020831015156109565780518252602082019150602081019050602083039250610931565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160008881526020019081526020016000206000016000896040518082805190602001908083835b6020831015156109d857805182526020820191506020810190506020830392506109b3565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600101600089815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660008a6040518082805190602001908083835b602083101515610a7b5780518252602082019150602081019050602083039250610a56565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160008a815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660008b6040518082805190602001908083835b602083101515610b1e5780518252602082019150602081019050602083039250610af9565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160008b815260200190815260200160002060030154848054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bfe5780601f10610bd357610100808354040283529160200191610bfe565b820191906000526020600020905b815481529060010190602001808311610be157829003601f168201915b50505050509450838054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c9a5780601f10610c6f57610100808354040283529160200191610c9a565b820191906000526020600020905b815481529060010190602001808311610c7d57829003601f168201915b50505050509350945094509450945094509295509295909350565b6000816000846040518082805190602001908083835b602083101515610cf05780518252602082019150602081019050602083039250610ccb565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000019080519060200190610d39929190611192565b506001839080600181540180825580915050906001820390600052602060002001600090919290919091509080519060200190610d77929190611192565b50506001905092915050565b600080826040518082805190602001908083835b602083101515610dbc5780518252602082019150602081019050602083039250610d97565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600201549050919050565b60008060016000886040518082805190602001908083835b602083101515610e375780518252602082019150602081019050602083039250610e12565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060020154019050856000886040518082805190602001908083835b602083101515610eaa5780518252602082019150602081019050602083039250610e85565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160008381526020019081526020016000206000019080519060200190610f07929190611192565b50846000886040518082805190602001908083835b602083101515610f415780518252602082019150602081019050602083039250610f1c565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600101600083815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550836000886040518082805190602001908083835b6020831015156110025780518252602082019150602081019050602083039250610fdd565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600101600083815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550826000886040518082805190602001908083835b6020831015156110c3578051825260208201915060208101905060208303925061109e565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600101600083815260200190815260200160002060030181905550806000886040518082805190602001908083835b60208310151561114a5780518252602082019150602081019050602083039250611125565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060020181905550600191505095945050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106111d357805160ff1916838001178555611201565b82800160010185558215611201579182015b828111156112005782518255916020019190600101906111e5565b5b50905061120e9190611212565b5090565b61123491905b80821115611230576000816000905550600101611218565b5090565b905600a165627a7a7230582041a7cbe3f9690d8b631a5f3c5428171608a88553a538fc0779a821a9de3621fe0029";
            string ABI = @"[ {  'constant':false,  'inputs':[   {    'name':'ProductKey',    'type':'string'   },   {    'name':'_transactionText',    'type':'string'   },   {    'name':'_fromAddress',    'type':'address'   },   {    'name':'_toAddress',    'type':'address'   },   {    'name':'_Price',    'type':'uint256'   }  ],  'name':'addTransaction',  'outputs':[   {    'name':'success',    'type':'bool'   }  ],  'payable':false,  'stateMutability':'nonpayable',  'type':'function' }, {  'constant':false,  'inputs':[   {    'name':'ProductKey',    'type':'string'   },   {    'name':'text',    'type':'string'   }  ],  'name':'newProduct',  'outputs':[   {    'name':'success',    'type':'bool'   }  ],  'payable':false,  'stateMutability':'nonpayable',  'type':'function' }, {  'constant':true,  'inputs':[   {    'name':'ProductKey',    'type':'string'   }  ],  'name':'getProduct',  'outputs':[   {    'name':'wording',    'type':'string'   },   {    'name':'TransactionCount',    'type':'uint256'   }  ],  'payable':false,  'stateMutability':'view',  'type':'function' }, {  'constant':true,  'inputs':[   {    'name':'row',    'type':'uint256'   }  ],  'name':'getProductAtIndex',  'outputs':[   {    'name':'productkey',    'type':'string'   }  ],  'payable':false,  'stateMutability':'view',  'type':'function' }, {  'constant':true,  'inputs':[   {    'name':'ProductKey',    'type':'string'   },   {    'name':'TransactionNo',    'type':'uint256'   }  ],  'name':'getProductTransaction',  'outputs':[   {    'name':'ProductText',    'type':'string'   },   {    'name':'TransactionText',    'type':'string'   },   {    'name':'FromAddress',    'type':'address'   },   {    'name':'ToAddress',    'type':'address'   },   {    'name':'TransacitonCost',    'type':'uint256'   }  ],  'payable':false,  'stateMutability':'view',  'type':'function' }, {  'constant':true,  'inputs':[   {    'name':'ProductKey',    'type':'string'   }  ],  'name':'getProductTransactionCount',  'outputs':[   {    'name':'transactionCount',    'type':'uint256'   }  ],  'payable':false,  'stateMutability':'view',  'type':'function' }, {  'constant':true,  'inputs':[],  'name':'getTransactionCount',  'outputs':[   {    'name':'ProductCount',    'type':'uint256'   }  ],  'payable':false,  'stateMutability':'view',  'type':'function' }]";
                  
            //Creates the connecto to the network and gets an instance of the contract.
            //var privateKey = "84B8A84EE89B2126C1693C4159D08A689FD8CE2E8A23FE3F0D8EEAF1B9BA2D99";
            //var account = new Account(privateKey);
            //var web3 = new Web3 (account, url);

            var account = new Account("<Ethereum Wallet Private Key>");//
            var contractAddress = "0xb01284ec4bc7f95a6f30b7e6fa781d31ae81d9f6";
            var web3 = new Web3("https://ropsten.infura.io/v3/57af8d0cb2024556b2e7af1a925ca074");
            //ProductHistoryService phs = new ProductHistoryService(web3, ContractAddress);
            var phs = new ProductHistoryService(web3, contractAddress);

            Contract ProductHistory = web3.Eth.GetContract(ABI, ContractAddress);

            //Reads the Product Count from getTransactionCount
            //Console.WriteLine("Getting number of products");
            //Task<BigInteger> ProductCountFunction = ProductHistory.GetFunction("getTransactionCount").CallAsync<BigInteger>();
            //ProductCountFunction.Wait();
            //int ProductsCount = (int)ProductCountFunction.Result;
            //Console.WriteLine("Number of products:" + ProductsCount);

            //string ProductKey = "0x6e66637465737431000000000000000000000000000000000000000000000000";//Use this if we already have a Hexa value
            //var ProductKeyhash = Nethereum.Util.Sha3Keccack.Current.CalculateHash("nfc1");//Use this if we are beginning with string value
            //var ProductKeyHex = ProductKey.HexToByteArray();

            //var ProductFunction = ProductHistory.GetFunction("getProduct");
            //var ProductDetail = await ProductFunction.CallDeserializingToObjectAsync<GetProductOutputDTO>(ProductKey.HexToByteArray());
            //Console.WriteLine("Product Key:", ProductKey);
            //Console.WriteLine("product Text:" + ProductDetail.ProdText + ", Transaction Count:" + ProductDetail.TransCount);
            
            //Bytes32TypeEncoder Byte32Endode = new Bytes32TypeEncoder();

            var newProductFunciton = ProductHistory.GetFunction("newProduct");
            Console.WriteLine("Adding new Product");
            var newProductKey = "ProductXXX1";
            string newProductText = "This is a test product from C#";

            var getProductTransaciton = new GetProductTransactionFunction()
            {
                ProductKey = "nfctest1",
                TransactionNo = 1
            };
            var ptfunction = await phs.GetProductTransactionQueryAsync(getProductTransaciton);
            Console.WriteLine("Got the Product detail", ptfunction.ProductText);

            var newProduct = new NewProductFunction()
            {
                ProductKey = newProductKey,
                Text = newProductText
            };
            var PordReceipt = await phs.NewProductRequestAndWaitForReceiptAsync (newProduct);
            Console.WriteLine("New Product Added", PordReceipt.TransactionHash);

            //NewProductRequestAndWaitForReceiptAsync(newProduct);
            //var TransactionHash = await newProductFunciton.SendTransactionAsync(senderAddress,newProductKey, newProductText);
            //var newProductHandler = web3.Eth.GetContractTransactionHandler<NewProductFunction>();
            //var SignedTransaction = await newProductHandler.SignTransactionAsync(ContractAddress, newProduct);
            //Console.WriteLine("New Product added", receipt.TransactionHash);


            var addTransaciton = new AddTransactionFunction()
            {
                ProductKey = "ProductXXX1",
                TransactionText = "This is a transfer of Product from owner to new owner",
                FromAddress = "0x14f82ce727Dd884fd989e78CbB68db9bb823B0F0",
                ToAddress = "0x14723A09ACff6D2A60DcdF7aA4AFf308FDDC160C",
                Price = 600
            };
            var TranReceipt = await phs.AddTransactionRequestAndWaitForReceiptAsync(addTransaciton);
            Console.WriteLine("Added Transaciton", TranReceipt.TransactionHash);
        }
    }

    [FunctionOutput]
    public class GetProductOutputDTO: IFunctionOutputDTO
    {
        [Parameter("string", "text")]
        public string ProdText { get; set; }
        [Parameter("uint", 1)]
        public BigInteger TransCount { get; set; }
    }

    [Function("getProduct")]
    public class GetProductFunction: FunctionMessage
    {
        [Parameter("string","key", 1)]
        public string ProductKey { get; set; }
    }

    //[Function("newProduct", "bool")]
    //public class newProductFunction : FunctionMessage
    //{
    //    [Parameter("bytes32", "ProductKey", 1)]
    //    public byte[] ProductKey { get; set; }

    //    [Parameter("string", "Text", 2)]
    //    public string ProductText { get; set; }
    //}
}
